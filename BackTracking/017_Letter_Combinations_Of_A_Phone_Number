class Solution {
    public HashMap<Integer, String> map = new HashMap<>();
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        map.put(2, "abc");
        map.put(3, "def");
        map.put(4,"ghi");
        map.put(5,"jkl");
        map.put(6,"mno");
        map.put(7,"pqrs");
        map.put(8,"tuv");
        map.put(9,"wxyz");

        if(digits.length() == 0){
            return result;
        }
        StringBuilder sb = new StringBuilder();
        backtrack(result, digits, sb, 0);
        return result;
    }

    public void backtrack(List<String> result, String digits, StringBuilder sb, int index){
        if(index == digits.length()){
            result.add(sb.toString());
            return;
        }

        char ch = digits.charAt(index);
        String str = map.get(ch - '0');

        for(int i = 0; i < str.length(); i++){
            sb.append(str.charAt(i));
            backtrack(result, digits, sb, index+1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
